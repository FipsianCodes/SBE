[SETUP]

# Chosse random forcing type:
#
#   Random noise acting on two wave numbers: 1
#   
#   Fractional Brownian Motion (FBM): 2
#
noise_type  = 2

# size of the Noise used for the forcing term
N           = 8192

# fix the seed in time
freeze      = yes
# define seed 
seed        = 1

# first wavenumber for random forcing 1
k1=2            
# second wavenumber for random forcing 1
k2=3            

# Init random initial value: if initial value is stored in file, set path to file
init        = yes
path_init   = ./PWD/

# compute average every nn steps
nn          = 10

# Amount of time slices used for the Reference Run. Output is written to file 
# at the end of each time slice. DT=T/Nt
Nt          = 10

# output of all states during runtime alongside with diagnostics 
# (highly increased storage costs and runtime - used during testing phase) 
write       = no   

# Simulation time after which the averaging is beginning to start.
Tavg        = 0

[OUTPUT]

path        = ./output/


[REFERENCE]
# needed for aposteriori error estimates 
run_ref     = no 

# Choose spatial discretization
#   FFT  :: pseudo-spectral code (FFT)
#   FDM  :: Finite-Difference-Method
#

SDM         = FDM

# Spatial resolution
N           = 1024 
# viscosity
nu          = 1e-05
# Simulation time interval 
Tn          = 100.0
T0          = 0.0
# Time steps on the time interval
dt          = 1e-02

# Time integration schemes provided:
#   RK1 :: Runge-Kutta 1 (Explicit Euler)
#   RK4 :: Runge-Kutta 4
#   AB2 :: Adam-Bashforth 2

# Propagator for reference
prop        = SRK2

# Use Smagorinsky Model, for (U)DNS set to 'no'
smag        = yes

# Set Smag constant
Cs          = 0.2 

# if FDM is chosen, the non-linear advection discretization can be chosen:
#
#       non-linear advection    ==    0.5 * du2/dx
#
#   con :: conservative form    == (2*div + adv)/3 
#   adv :: advective form       == u * du/dx        # not stable
#   div :: divergence form      == 0.5 * du^2/dx    # not stable

ADV         = con

[PARAREAL]
# In case of interest in serial computations only, set 'no'. 
#
#   Parareal for different time integration only:
#
#       Uk+1 = Gk+1 + Fk - Gk
#

run_par     = no 

# maximum amount of iterations
Kmax        = 2 

N           = 1024
T0          = 0
Tn          = 100
Nt          = 10

nu          = 1e-05

propc       = AB2
dtc         = 1e-02
SDMc        = FDM
smagc       = yes 
Csc         = 0.16

# applies only for the FDM case!
ADVc        = con 

propf       = SRK2
dtf         = 1e-02
SDMf        = FFT
smagf       = yes
Csf         = 0.16

# applies only for the FDM case!
ADVf        = con

[MMPARAREAL]
# In case of interest in serial computations only, set 'no'. 
#
#   Two algorithms are provided:
#
#       Alg.1 :: Uk+1 = Fk + L(Gk+1 - Gk)
#
#       Alg.2 :: Uk+1 = L(Gk+1 - R(Fk) +Gk) + F - L(R(Fk))
#

run_mmpar   = yes

alg         = 2

# maximum amount of iterations
Kmax        = 2 

# simulation time interval [T0,Tn]
T0          = 0.0
Tn          = 100.0
# Number of time slices in micro-macro Parareal
Nt          = 10           

# kinematic viscosity of the experiment
nu          = 1e-05

# Spatial resolution on the coarse domain
Nc          = 128 
# Spatial resolution on the fine domain 
Nf          = 1024
# Output intervals of both propgators have to be chosen, such that:
#   nc*dtc == nnf*dtf

# Coarse output
nnc         = 10
# Fine output 
nnf         = 10

# coarse time integration
propc       = SRK2
# coarse time step size
dtc         = 1e-02
# coarse spatial discretization
SDMc        = FDM 
# use Smagorinsky model for Burgulence
smagc       = yes
# define Smagorinsky constant
Csc         = 0.4 
# applies only for the FDM case!
ADVc        = con 

# fine time integration
propf       = SRK2
# fine time step size
dtf         = 1e-02
# fine spatial discretization
SDMf        = FFT 
# use Smagorinsky model for Burgulence
smagf       = yes
# define Smagorinksy constant
Csf         = 0.2 

# applies only for the FDM case!
ADVf        = con 

# Interpolation methods for Lifting(L) and Restriction(R)
#
#   Interpolation Operators:
#       NN      :: Nearest Neighbour
#       LIN     :: Linear 
#       QUAD    :: Quadratic
#       CUBIC   :: Cubic                
#       FFT     :: Fourier Interpolation
#       CONSV1  :: Conservative Interpolation of first order
#       CONSV2  :: Conservative Interpolation of second order (Lifting only)

L           = LIN
R           = CONSV1

